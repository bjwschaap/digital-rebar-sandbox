---
- hosts: drb
  
  vars_files:
    - vars.yml

  handlers:
    - name: Save iptables rules
      shell: iptables-save > /etc/iptables/rules.v4
      listen: persist-iptables

  roles:
    - digital-rebar

  pre_tasks:
    - name: Install required packages
      apt:
        name:
          - unzip
          - libcap2-bin
          - iptables-persistent
          - jq
        state: present


    - name: Install DNS Proxy
      apt:
        name: dnsproxy
        state: present
      ignore_errors: yes # Install fails because it can't start without proper config


    - name: Get (first) DNS server
      shell: cat /etc/resolv.conf |grep nameserver | head -n1 | cut -d ' ' -f2
      register: resolv_dns_ip


    - set_fact:
        dns_ip: "{{ resolv_dns_ip.stdout }}"


    - name: Create dnsproxy config
      template:
        src: dnsproxy.conf
        dest: /etc/dnsproxy.conf


    - name: Start dnsproxy
      service:
        name: dnsproxy
        enabled: true
        state: started


    - name: Create /usr/share/dr-provision
      file:
        path: /usr/share/dr-provision
        state: directory

    
    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        sysctl_set: yes


    - name: Set IP Masquerade
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: enp0s3
        jump: MASQUERADE
      notify: persist-iptables


    - name: Allow internal traffic to the outside
      iptables:
        chain: FORWARD
        in_interface: enp0s8
        out_interface: enp0s3
        jump: ACCEPT
      notify: persist-iptables


    - name: Allow related traffic from the outside back in
      iptables:
        chain: FORWARD
        in_interface: enp0s3
        out_interface: enp0s8
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT
      notify: persist-iptables

  post_tasks:
    - name: Set capabilities on dr-provision binary
      capabilities:
        path: "{{ digital_rebar_binary }}"
        capability: cap_net_bind_service,cap_net_raw+ep
        state: present


    - name: Check if community content already downloaded
      stat:
        path: /tmp/drp-community-content
      register: community_content


    - name: Download community content
      get_url:
        url: "{{ item }}"
        dest: /tmp
      with_items:
        - "{{ digital_rebar_content_catalog_url }}/drp-community-contrib?version={{ digital_rebar_content_version }}"
        - "{{ digital_rebar_content_catalog_url }}/drp-community-content?version={{ digital_rebar_content_version }}"
        - "{{ digital_rebar_content_catalog_url }}/ansible?version={{ digital_rebar_content_version }}"
        - "{{ digital_rebar_content_catalog_url }}/classify?version={{ digital_rebar_content_version }}"
        - "{{ digital_rebar_content_catalog_url }}/task-library?version={{ digital_rebar_content_version }}"
        - "{{ digital_rebar_content_catalog_url }}/dev-library?version={{ digital_rebar_content_version }}"
        - "{{ digital_rebar_content_catalog_url }}/krib?version={{ digital_rebar_content_version }}"
      when: not community_content.stat.exists


    - name: Install community content
      shell: "drpcli contents upload {{ item }}"
      with_items:
        - /tmp/drp-community-contrib
        - /tmp/drp-community-content
        - /tmp/ansible
        - /tmp/classify
        - /tmp/task-library
        - /tmp/dev-library
        - /tmp/krib
      when: not community_content.stat.exists

    
    - name: Check if subnet exists
      shell: drpcli subnets show local_subnet
      register: local_subnet
      ignore_errors: yes
      no_log: True


    - name: Create subnet template
      template:
        src: subnet.yaml
        dest: /tmp/subnet.yaml
      when: local_subnet.rc != 0


    - name: Create local subnet from template
      shell: drpcli subnets create /tmp/subnet.yaml
      when: local_subnet.rc != 0


    - name: Count known discovery bootenv ISOs
      shell: drpcli bootenvs show discovery | jq -r .OS.SupportedArchitectures[].IsoFile | wc -l
      register: discovery_bootenv_isos


    - name: Known discovery bootenv ISOs (architectures)
      debug: msg="{{discovery_bootenv_isos.stdout}}"


    - name: Count discovery bootenv ISOs already uploaded
      shell: drpcli isos list | grep sledgehammer | wc -l
      register: discovery_isos_uploaded


    - name: Already uploaded bootenv ISOs
      debug: msg="{{discovery_isos_uploaded.stdout}}"


    # For some reason uploadiso only downloads one ISO each time it's called
    # so we need to execute one time for each supported architecture.
    - name: UploadISO for Discovery BootEnv
      shell: drpcli bootenvs uploadiso sledgehammer
      when: discovery_bootenv_isos.stdout != discovery_isos_uploaded.stdout
      loop: "{{ range(discovery_bootenv_isos.stdout|int - discovery_isos_uploaded.stdout|int)|list }}"
      ignore_errors: yes
      no_log: True


    - name: Detect if debian-9-install BootEnv ISO is missing
      shell: drpcli isos list | jq -r .[] | grep 'debian-9'
      register: debian9_bootenv
      ignore_errors: yes
      no_log: True


    - name: UploadISO for Debian 9 BootEnv
      shell: drpcli bootenvs uploadiso debian-9-install
      when: debian9_bootenv.rc != 0


    - name: Detect discovery workflow
      shell: drpcli workflows list | jq -r '.[] | select( .Name == "discovery") | .Name' | grep discovery
      register: discovery_workflow
      ignore_errors: yes
      no_log: True


    - name: Create discovery workflow
      shell: "drpcli workflows create '{ \"Name\": \"discovery\", \"Stages\": [ \"discover\", \"sledgehammer-wait\" ] }'"
      when: discovery_workflow.rc != 0


    - name: Detect default Workflow
      shell: drpcli prefs list | grep defaultWorkflow
      register: default_workflow
      ignore_errors: yes
      no_log: True


    - name: Set default Workflow
      shell: drpcli prefs set defaultWorkflow discovery unknownBootEnv discovery defaultBootEnv sledgehammer defaultStage discover
      when: default_workflow.rc != 0


    # Certs plugin provider is needed for KRIB
    - name: Determine if certs plugin provider is installed
      shell: drpcli plugin_providers list | jq -r .[].Name | grep certs
      register: certs_plugin_provider
      ignore_errors: yes
      no_log: True


    - when: certs_plugin_provider.rc != 0
      block:
      - name: Get certs plugin_provider download url
        shell: "curl -s {{ digital_rebar_plugin_catalog_url }}/certs?version={{ digital_rebar_certs_plugin_provider_version }} | jq -r '(.base)+(.amd64.linux)'"
        args:
          warn: false
        register: certs_url

      - name: Download certs plugin provider
        get_url:
          url: "{{ certs_url.stdout }}"
          dest: /tmp

      - name: Install certs plugin provider
        shell: drpcli plugin_providers upload certs from /tmp/certs
